const { PrismaClient, Prisma } = require('@prisma/client');
const prisma = new PrismaClient();

async function testCoordinates() {
  try {
    const testLat = new Prisma.Decimal('-15.845376982473867');
    const testLng = new Prisma.Decimal('-47.89250481541082');

    console.log('\nüéØ Testando coordenadas com precis√£o completa\n');
    console.log('Valores originais:');
    console.log('Latitude:', testLat.toString());
    console.log('Longitude:', testLng.toString());
    console.log('');

    const property = await prisma.property.findFirst();

    if (!property) {
      console.log('‚ùå Nenhum im√≥vel encontrado');
      return;
    }

    console.log(`Atualizando im√≥vel: ${property.title}`);

    const updated = await prisma.property.update({
      where: { id: property.id },
      data: {
        latitude: testLat,
        longitude: testLng
      }
    });

    console.log('\n‚úÖ Valores salvos no banco:');
    console.log('Latitude:', updated.latitude.toString());
    console.log('Longitude:', updated.longitude.toString());

    const latMatch = testLat.toString() === updated.latitude.toString();
    const lngMatch = testLng.toString() === updated.longitude.toString();

    console.log('\nüìä Resultado:');
    console.log('Latitude:', latMatch ? '‚úÖ PERFEITO' : '‚ö†Ô∏è PERDA DE PRECIS√ÉO');
    console.log('Longitude:', lngMatch ? '‚úÖ PERFEITO' : '‚ö†Ô∏è PERDA DE PRECIS√ÉO');

    if (latMatch && lngMatch) {
      console.log('\nüéâ SUCESSO! Coordenadas salvas com precis√£o total!\n');
    }

  } catch (error) {
    console.error('\n‚ùå Erro:', error.message);
    console.log('\nüí° Dica: Reinicie o servidor Next.js para limpar o cache do PostgreSQL\n');
  } finally {
    await prisma.$disconnect();
  }
}

testCoordinates();