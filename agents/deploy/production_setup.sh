#!/bin/bash

echo "üè≠ Configurando agentes para PRODU√á√ÉO..."

# Verificar se est√° sendo executado como root/sudo
if [[ $EUID -eq 0 ]]; then
   echo "‚ö†Ô∏è Este script n√£o deve ser executado como root"
   exit 1
fi

# Verificar Python 3.8+
python3_version=$(python3 -c 'import sys; print(".".join(map(str, sys.version_info[:2])))')
echo "üêç Python version: $python3_version"

if python3 -c "import sys; exit(0 if sys.version_info >= (3, 8) else 1)"; then
    echo "‚úÖ Python version OK"
else
    echo "‚ùå Python 3.8+ √© necess√°rio. Vers√£o atual: $python3_version"
    exit 1
fi

# Criar ambiente virtual para produ√ß√£o
echo "üì¶ Criando ambiente virtual de produ√ß√£o..."
python3 -m venv production_env
source production_env/bin/activate

# Atualizar pip
pip install --upgrade pip

# Instalar depend√™ncias com vers√µes fixas para produ√ß√£o
echo "üì• Instalando depend√™ncias de produ√ß√£o..."
cat > requirements_production.txt << 'EOF'
controlflow==0.12.1
asyncpg==0.29.0
python-dotenv==1.0.0
requests==2.31.0
aiohttp==3.9.0
loguru==0.7.2
pydantic==2.5.0
sqlalchemy==2.0.23
asyncio-mqtt==0.16.1
psycopg2-binary==2.9.7
uvloop==0.19.0
EOF

pip install -r requirements_production.txt

# Configurar arquivo .env para produ√ß√£o
echo "‚öôÔ∏è Configurando ambiente de produ√ß√£o..."

if [ ! -f .env ]; then
    echo "üìù Criando arquivo .env de produ√ß√£o..."
    cp ../.env.production .env

    echo ""
    echo "üîß CONFIGURA√á√ÉO NECESS√ÅRIA:"
    echo "1. Edite o arquivo .env com suas credenciais de produ√ß√£o"
    echo "2. Configure DATABASE_URL para PostgreSQL"
    echo "3. Configure NEXTJS_URL para https://modelo-site-imob.vercel.app"
    echo "4. Configure AGENT_AUTH_TOKEN (gere uma chave forte)"
    echo "5. Configure webhooks de monitoramento (opcional)"
    echo ""
else
    echo "‚úÖ Arquivo .env j√° existe"
fi

# Criar estrutura de logs
echo "üìÅ Criando estrutura de logs..."
mkdir -p logs
mkdir -p data
mkdir -p backups

# Configurar logrotate para produ√ß√£o
cat > logrotate.conf << 'EOF'
logs/*.log {
    daily
    missingok
    rotate 30
    compress
    delaycompress
    notifempty
    sharedscripts
    postrotate
        # Restart agents se necess√°rio
        pkill -f "python.*production_main.py" || true
        sleep 2
        nohup python production_main.py > logs/startup.log 2>&1 &
    endscript
}
EOF

# Criar script de inicializa√ß√£o systemd
echo "üîß Criando servi√ßo systemd..."
cat > imobinext-agents.service << 'EOF'
[Unit]
Description=ImobiNext AI Agents
After=network.target
Wants=network.target

[Service]
Type=simple
User=alex
Group=alex
WorkingDirectory=/home/alex/site-imobiliaria-v2/agents
Environment=PATH=/home/alex/site-imobiliaria-v2/agents/production_env/bin
ExecStart=/home/alex/site-imobiliaria-v2/agents/production_env/bin/python production_main.py
Restart=always
RestartSec=10
StandardOutput=journal
StandardError=journal
SyslogIdentifier=imobinext-agents

# Limits de seguran√ßa
LimitNOFILE=65536
LimitNPROC=4096

[Install]
WantedBy=multi-user.target
EOF

# Criar script de monitoramento
cat > monitor_agents.sh << 'EOF'
#!/bin/bash

# Monitor script for production agents
PIDFILE="production_main.pid"

check_agents() {
    if [ -f "$PIDFILE" ]; then
        PID=$(cat $PIDFILE)
        if ps -p $PID > /dev/null 2>&1; then
            echo "‚úÖ Agentes rodando (PID: $PID)"
            return 0
        else
            echo "‚ùå PID file existe mas processo n√£o est√° rodando"
            rm -f $PIDFILE
            return 1
        fi
    else
        echo "‚ùå Agentes n√£o est√£o rodando"
        return 1
    fi
}

start_agents() {
    if check_agents; then
        echo "‚ö†Ô∏è Agentes j√° est√£o rodando"
        return 0
    fi

    echo "üöÄ Iniciando agentes..."
    source production_env/bin/activate
    nohup python production_main.py > logs/startup.log 2>&1 &
    echo $! > $PIDFILE
    echo "‚úÖ Agentes iniciados (PID: $(cat $PIDFILE))"
}

stop_agents() {
    if [ -f "$PIDFILE" ]; then
        PID=$(cat $PIDFILE)
        echo "üõë Parando agentes (PID: $PID)..."
        kill -TERM $PID 2>/dev/null

        # Aguardar shutdown graceful
        for i in {1..30}; do
            if ! ps -p $PID > /dev/null 2>&1; then
                break
            fi
            sleep 1
        done

        # Force kill se necess√°rio
        if ps -p $PID > /dev/null 2>&1; then
            echo "‚ö†Ô∏è For√ßando parada..."
            kill -KILL $PID 2>/dev/null
        fi

        rm -f $PIDFILE
        echo "‚úÖ Agentes parados"
    else
        echo "‚ö†Ô∏è Agentes n√£o est√£o rodando"
    fi
}

restart_agents() {
    stop_agents
    sleep 2
    start_agents
}

case "$1" in
    start)
        start_agents
        ;;
    stop)
        stop_agents
        ;;
    restart)
        restart_agents
        ;;
    status)
        check_agents
        ;;
    logs)
        tail -f logs/production.log
        ;;
    *)
        echo "Uso: $0 {start|stop|restart|status|logs}"
        exit 1
        ;;
esac
EOF

chmod +x monitor_agents.sh

# Criar script de backup
cat > backup_logs.sh << 'EOF'
#!/bin/bash
DATE=$(date +%Y%m%d_%H%M%S)
tar -czf "backups/logs_backup_$DATE.tar.gz" logs/
find backups/ -name "logs_backup_*.tar.gz" -mtime +7 -delete
echo "üì¶ Backup de logs criado: logs_backup_$DATE.tar.gz"
EOF

chmod +x backup_logs.sh

# Verificar banco de dados
echo "üóÑÔ∏è Verificando configura√ß√£o do banco..."
if grep -q "sqlite" .env 2>/dev/null; then
    echo "‚ö†Ô∏è ATEN√á√ÉO: SQLite detectado. Para produ√ß√£o, recomenda-se PostgreSQL"
    echo "   Configure DATABASE_URL com PostgreSQL para melhor performance"
fi

# Teste de conectividade
echo "üß™ Testando configura√ß√£o..."
source production_env/bin/activate

python3 -c "
try:
    from config.database import db
    settings = db.get_site_settings()
    print('‚úÖ Conex√£o com banco OK')
    print(f'üì± WhatsApp configurado: {bool(settings.get(\"contactWhatsapp\"))}')
except Exception as e:
    print(f'‚ùå Erro de configura√ß√£o: {e}')
" 2>/dev/null || echo "‚ö†Ô∏è Execute este teste ap√≥s configurar o .env"

echo ""
echo "üéØ SETUP DE PRODU√á√ÉO CONCLU√çDO!"
echo ""
echo "üìã PR√ìXIMOS PASSOS:"
echo "1. Configure o arquivo .env com valores de produ√ß√£o"
echo "2. Teste: ./monitor_agents.sh start"
echo "3. Verificar logs: ./monitor_agents.sh logs"
echo "4. Para systemd: sudo cp imobinext-agents.service /etc/systemd/system/"
echo "5. Habilitar servi√ßo: sudo systemctl enable imobinext-agents"
echo ""
echo "üîß COMANDOS √öTEIS:"
echo "‚Ä¢ Iniciar: ./monitor_agents.sh start"
echo "‚Ä¢ Parar: ./monitor_agents.sh stop"
echo "‚Ä¢ Status: ./monitor_agents.sh status"
echo "‚Ä¢ Logs: ./monitor_agents.sh logs"
echo "‚Ä¢ Backup: ./backup_logs.sh"
echo ""
echo "üìä MONITORAMENTO:"
echo "‚Ä¢ Health check: curl https://modelo-site-imob.vercel.app/api/health"
echo "‚Ä¢ Logs estruturados em: logs/production.log"
echo ""

# Final check
if [ -f .env ]; then
    echo "‚úÖ Configura√ß√£o base pronta"
else
    echo "‚ö†Ô∏è Configure o arquivo .env antes de usar"
fi