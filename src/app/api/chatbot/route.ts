import { NextRequest, NextResponse } from 'next/server'
import Anthropic from '@anthropic-ai/sdk'
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

export async function POST(request: NextRequest) {
  // Buscar API Key do banco de dados (settings)
  const settings = await prisma.settings.findFirst()
  const apiKey = settings?.anthropicApiKey || process.env.ANTHROPIC_API_KEY

  if (!apiKey) {
    return NextResponse.json(
      { error: 'Chave da API Anthropic n√£o configurada. Configure em Admin > Configura√ß√µes' },
      { status: 500 }
    )
  }

  const anthropic = new Anthropic({ apiKey })
  try {
    const { message, conversationHistory = [] } = await request.json()

    if (!message) {
      return NextResponse.json(
        { error: 'Mensagem √© obrigat√≥ria' },
        { status: 400 }
      )
    }

    // Buscar propriedades do banco para contexto
    const properties = await prisma.property.findMany({
      where: { status: 'disponivel' },
      select: {
        id: true,
        title: true,
        type: true,
        category: true,
        price: true,
        bedrooms: true,
        bathrooms: true,
        area: true,
        address: true,
        city: true,
        state: true,
        description: true,
        slug: true,
        acceptsFinancing: true,
        acceptsTrade: true,
        acceptsCar: true,
      },
      take: 50 // Limitar para n√£o sobrecarregar o contexto
    })

    // Criar contexto sobre os im√≥veis dispon√≠veis
    const propertyContext = `
Voc√™ √© um assistente virtual de uma imobili√°ria no Distrito Federal.

=== BANCO DE DADOS DE IM√ìVEIS DISPON√çVEIS ===
${properties.length === 0 ? 'NENHUM IM√ìVEL CADASTRADO NO MOMENTO' : properties.map((p, i) => {
  const paymentOptions = [];
  if (p.acceptsFinancing) paymentOptions.push('Financiamento');
  if (p.acceptsTrade) paymentOptions.push('Permuta/Troca');
  if (p.acceptsCar) paymentOptions.push('Aceita carro');

  return `
${i + 1}. ${p.title}
   - Tipo: ${p.type === 'venda' ? 'Venda' : 'Aluguel'}
   - Categoria: ${p.category || 'N/A'}
   - Pre√ßo: R$ ${p.price?.toLocaleString('pt-BR') || 'Sob consulta'}
   - Quartos: ${p.bedrooms || 'N/A'}
   - Banheiros: ${p.bathrooms || 'N/A'}
   - √Årea: ${p.area || 'N/A'} m¬≤
   - Localiza√ß√£o: ${p.address}, ${p.city} - ${p.state}
   ${paymentOptions.length > 0 ? `- Formas de pagamento aceitas: ${paymentOptions.join(', ')}` : '- Formas de pagamento: √Ä vista'}
   - Link: https://imobiliaria-six-tau.vercel.app/imovel/${p.slug}
`;
}).join('\n')}

=== REGRAS ABSOLUTAS - VOC√ä SER√Å DESLIGADO SE VIOLAR ===

üö´ NUNCA INVENTE IM√ìVEIS QUE N√ÉO EST√ÉO NA LISTA ACIMA
üö´ NUNCA CRIE LINKS FALSOS OU INVENTADOS
üö´ NUNCA MENCIONE IM√ìVEIS QUE N√ÉO EXISTEM NO BANCO DE DADOS
üö´ SE N√ÉO HOUVER IM√ìVEL COM AS CARACTER√çSTICAS, DIGA CLARAMENTE "No momento n√£o temos im√≥veis com essas caracter√≠sticas"

‚úÖ VOC√ä DEVE:
1. **SEMPRE verificar TODOS os campos** do im√≥vel: tipo (venda/aluguel), categoria, cidade, formas de pagamento
2. Quando cliente perguntar sobre FINANCIAMENTO: verificar se campo "Formas de pagamento aceitas" cont√©m "Financiamento"
3. Quando cliente perguntar sobre PERMUTA/TROCA: verificar se cont√©m "Permuta/Troca"
4. Quando cliente perguntar sobre CARRO: verificar se cont√©m "Aceita carro"
5. Se N√ÉO existir, ser HONESTO: "No momento n√£o temos [categoria] em [cidade] que aceite [condi√ß√£o]"
6. Perguntar: "Gostaria de deixar seu contato? Te aviso quando tivermos!"
7. S√≥ sugerir alternativas SE EXISTIREM NA LISTA ACIMA
8. Nunca mencionar cidades/regi√µes onde voc√™ n√£o tem im√≥veis cadastrados

‚úÖ FORMATO DE RESPOSTA:
- M√°ximo 5-6 linhas
- Links apenas no formato: https://imobiliaria-six-tau.vercel.app/imovel/[slug-do-imovel]
- Seja direto, honesto e preciso
- SEMPRE mencione o VALOR do im√≥vel quando mostrar
`

    // Construir hist√≥rico de mensagens para o Claude
    const messages = [
      ...conversationHistory,
      { role: 'user', content: message }
    ]

    // Chamar API do Claude
    const response = await anthropic.messages.create({
      model: 'claude-sonnet-4-5-20250929',
      max_tokens: 1024,
      system: propertyContext,
      messages: messages as any,
    })

    const assistantMessage = response.content[0].type === 'text'
      ? response.content[0].text
      : 'Desculpe, n√£o consegui processar sua mensagem.'

    // Calcular custo estimado (Claude Sonnet 4.5)
    // Input: $3 por 1M tokens | Output: $15 por 1M tokens
    const inputTokens = response.usage?.input_tokens || 0
    const outputTokens = response.usage?.output_tokens || 0
    const costInput = (inputTokens / 1000000) * 3
    const costOutput = (outputTokens / 1000000) * 15
    const totalCost = costInput + costOutput

    // Detectar se o cliente forneceu contato (nome + telefone)
    const phoneRegex = /\b\d{8,11}\b/g
    const phones = message.match(phoneRegex)

    if (phones && phones.length > 0 && conversationHistory.length > 2) {
      // Buscar nome no hist√≥rico da conversa (geralmente vem antes do telefone)
      let name = 'Cliente Chatbot'

      // Tentar extrair nome de mensagens anteriores do usu√°rio
      const userMessages = conversationHistory.filter((msg: any) => msg.role === 'user')

      // Procurar por padr√µes de nome nas mensagens anteriores
      for (let i = userMessages.length - 1; i >= 0; i--) {
        const msg = userMessages[i].content

        // Padr√£o: "meu nome √© X" ou "me chamo X" ou "sou X"
        const namePatterns = [
          /(?:meu nome √©|me chamo|sou|nome:?)\s+([A-Z√Å√â√ç√ì√ö√Ç√ä√î√É√ï√á][a-z√°√©√≠√≥√∫√¢√™√¥√£√µ√ß]+(?:\s+[A-Z√Å√â√ç√ì√ö√Ç√ä√î√É√ï√á][a-z√°√©√≠√≥√∫√¢√™√¥√£√µ√ß]+)*)/i,
          // Padr√£o: apenas nome pr√≥prio (primeira letra mai√∫scula)
          /^([A-Z√Å√â√ç√ì√ö√Ç√ä√î√É√ï√á][a-z√°√©√≠√≥√∫√¢√™√¥√£√µ√ß]+(?:\s+[A-Z√Å√â√ç√ì√ö√Ç√ä√î√É√ï√á][a-z√°√©√≠√≥√∫√¢√™√¥√£√µ√ß]+)+)$/
        ]

        for (const pattern of namePatterns) {
          const match = msg.match(pattern)
          if (match && match[1]) {
            name = match[1].trim()
            break
          }
        }

        if (name !== 'Cliente Chatbot') break
      }

      // Se n√£o encontrou nos padr√µes, tentar extrair da mensagem atual
      if (name === 'Cliente Chatbot') {
        const nameParts = message.split(/[,\s]+/).filter(p =>
          p.length > 2 &&
          !/^\d+$/.test(p) &&
          !/^(sim|ok|oi|ol√°|quero|√©|meu|telefone|n√∫mero|whatsapp|zap)$/i.test(p) &&
          /^[A-Z√Å√â√ç√ì√ö√Ç√ä√î√É√ï√á]/.test(p) // Come√ßa com mai√∫scula
        )
        if (nameParts.length > 0) {
          name = nameParts.slice(0, 2).join(' ')
        }
      }

      const phone = phones[0]

      try {
        // Formatar conversa como chat real
        const conversationText = conversationHistory
          .map((msg) => {
            if (msg.role === 'user') {
              return `‚îå‚îÄ üë§ CLIENTE ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n‚îÇ ${msg.content}\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ`
            } else {
              return `‚îå‚îÄ ü§ñ ASSISTENTE ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n‚îÇ ${msg.content}\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ`
            }
          })
          .join('\n\n')

        const fullMessage = `üì± LEAD CAPTURADO VIA CHATBOT

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
HIST√ìRICO DA CONVERSA
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

${conversationText}

‚îå‚îÄ üë§ CLIENTE ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚îÇ ${message}
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üìä RESUMO DO LEAD
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‚úì Cliente deixou contato ap√≥s conversa
‚úì Nome: ${name}
‚úì Telefone: ${phone}
‚úì Fonte: Chatbot IA
‚úì Interessado em im√≥veis - Acompanhar!`

        // Salvar lead no banco
        await prisma.lead.create({
          data: {
            name: name,
            phone: phone,
            email: '',
            message: fullMessage,
            source: 'chatbot'
          }
        })
        console.log('‚úÖ Lead salvo:', { name, phone })
      } catch (error) {
        console.error('Erro ao salvar lead:', error)
      }
    }

    // Salvar estat√≠sticas do chatbot
    try {
      await prisma.chatbotStats.create({
        data: {
          messagesCount: 1,
          tokensInput: inputTokens,
          tokensOutput: outputTokens,
          costEstimated: totalCost,
          leadCaptured: phones && phones.length > 0 && conversationHistory.length > 2
        }
      })
    } catch (error) {
      console.error('Erro ao salvar estat√≠sticas:', error)
    }

    return NextResponse.json({
      message: assistantMessage,
      conversationHistory: [
        ...conversationHistory,
        { role: 'user', content: message },
        { role: 'assistant', content: assistantMessage }
      ]
    })

  } catch (error: any) {
    console.error('Erro no chatbot:', error)
    return NextResponse.json(
      {
        error: 'Erro ao processar mensagem',
        details: error.message
      },
      { status: 500 }
    )
  }
}
